from json.tool import main
from operator import truediv
from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        """
        Each row must contain the digits 1-9 without repetition.
        Each column must contain the digits 1-9 without repetition.
        Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.        
        [["5","3",".",".","7",".",".",".","."]
        ,["6",".",".","1","9","5",".",".","."]
        ,[".","9","8",".",".",".",".","6","."]
        ,["8",".",".",".","6",".",".",".","3"]
        ,["4",".",".","8",".","3",".",".","1"]
        ,["7",".",".",".","2",".",".",".","6"]
        ,[".","6",".",".",".",".","2","8","."]
        ,[".",".",".","4","1","9",".",".","5"]
        ,[".",".",".",".","8",".",".","7","9"]]
        Output: true        
        """
        m = len(board)
        n = len(board[0])
        def dup_check(f):
            for i in range(m):
                s = set()
                k = 0
                for j in range(n):
                    if f(i, j) != '.':
                        s.add(f(i,j))
                        k+=1
                if len(s) < k:
                    return False
            return True
        return  dup_check(lambda i,j: board[i][j]) and dup_check(lambda i,j: board[j][i]) and  dup_check(lambda i,j: board[j//3+(i//3)*3][j%3 + (i%3)*3])     
    
    def isValidSudoku2(self, board):
        seen = []
        for i, row in enumerate(board):
            for j, c in enumerate(row):
                if c != '.':
                    seen += [(c,j),(i,c),(i/3,j/3,c)]
        return len(seen) == len(set(seen))
if __name__ == '__main__':
    s = Solution()
    board = [["5","3",".",".","7",".",".",".","."]
            ,["6",".",".","1","9","5",".",".","."]
            ,[".","9","8",".",".",".",".","6","."]
            ,["8",".",".",".","6",".",".",".","3"]
            ,["4",".",".","8",".","3",".",".","1"]
            ,["7",".",".",".","2",".",".",".","6"]
            ,[".","6",".",".",".",".","2","8","."]
            ,[".",".",".","4","1","9",".",".","5"]
            ,[".",".",".",".","8",".",".","7","9"]]    
    board2 = [["8","3",".",".","7",".",".",".","."]
             ,["6",".",".","1","9","5",".",".","."]
             ,[".","9","8",".",".",".",".","6","."]
             ,["8",".",".",".","6",".",".",".","3"]
             ,["4",".",".","8",".","3",".",".","1"]
             ,["7",".",".",".","2",".",".",".","6"]
             ,[".","6",".",".",".",".","2","8","."]
             ,[".",".",".","4","1","9",".",".","5"]
             ,[".",".",".",".","8",".",".","7","9"]]    
    board3 = [[".","9",".",".","4",".",".",".","."],
              ["1",".",".",".",".",".","6",".","."],
              [".",".","3",".",".",".",".",".","."],
              [".",".",".",".",".",".",".",".","."],
              [".",".",".","7",".",".",".",".","."],
              ["3",".",".",".","5",".",".",".","."],
              [".",".","7",".",".","4",".",".","."],
              [".",".",".",".",".",".",".",".","."],
              [".",".",".",".","7",".",".",".","."]]             
    print(s.isValidSudoku(board))
    